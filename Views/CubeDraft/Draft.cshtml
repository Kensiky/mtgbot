@using MTGOLibrary.Models
@using MTGOLibrary
@model MTGBotWebsite.Helpers.CubeDraftDraftModel

@{
    ViewBag.Title = "Cube Draft";
    ViewBag.MiniLayout = true;
}

<style type="text/css">
#picks .gallery li a.reserved
{
    background-color: #1C5EA0;
    border-color: #064792;
}

#votes h3 {
    height: 30px;
    margin: 0px !important;
    padding: 0px;
}

#picks .previous_pick_overlay {
    background: #eb0c0a url(/Images/ui-bg_diagonals-thick_40_eb0c0a_40x40.png) 50% 50% repeat;
    opacity: .5;
    filter: Alpha(Opacity=50);
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
}

#picks .previous_pick_overlay.picked {
    background: #0a2feb url(/Images/ui-bg_diagonals-thick_40_0a2feb_40x40.png) 50% 50% repeat;
}

#votes .ui-progressbar-value {
    margin: -31px -1px -1px -1px;
}

#votes .ui-progressbar-value.green {
    background-color: #5eb95e;
    background-image: -moz-linear-gradient(top, #62c462, #57a957);
    background-image: -ms-linear-gradient(top, #62c462, #57a957);
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#62c462), to(#57a957));
    background-image: -webkit-linear-gradient(top, #62c462, #57a957);
    background-image: -o-linear-gradient(top, #62c462, #57a957);
    background-image: linear-gradient(top, #62c462, #57a957);
    background-repeat: repeat-x;
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#62c462', endColorstr='#57a957', GradientType=0);
}

#votes .ui-progressbar-value.yellow {
    background-color: #faa732;
    background-image: -moz-linear-gradient(top, #fbb450, #f89406);
    background-image: -ms-linear-gradient(top, #fbb450, #f89406);
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#fbb450), to(#f89406));
    background-image: -webkit-linear-gradient(top, #fbb450, #f89406);
    background-image: -o-linear-gradient(top, #fbb450, #f89406);
    background-image: linear-gradient(top, #fbb450, #f89406);
    background-repeat: repeat-x;
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#fbb450', endColorstr='#f89406', GradientType=0);
}

#votes .ui-progressbar-value.red {
    background-color: #dd514c;
    background-image: -moz-linear-gradient(top, #ee5f5b, #c43c35);
    background-image: -ms-linear-gradient(top, #ee5f5b, #c43c35);
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#ee5f5b), to(#c43c35));
    background-image: -webkit-linear-gradient(top, #ee5f5b, #c43c35);
    background-image: -o-linear-gradient(top, #ee5f5b, #c43c35);
    background-image: linear-gradient(top, #ee5f5b, #c43c35);
    background-repeat: repeat-x;
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ee5f5b', endColorstr='#c43c35', GradientType=0);
}

#votes .ui-progressbar-value {
    -webkit-transition: width 0.6s ease;
    -moz-transition: width 0.6s ease;
    -ms-transition: width 0.6s ease;
    -o-transition: width 0.6s ease;
    transition: width 0.6s ease;
}

</style>

<div class="box grid_16">
    <h2 class="box_head">Current Pick: <div data-bind="text: currentpick" style="display: inline;">&nbsp;</div>, Pack: <div data-bind="text: currentpack" style="display: inline;">&nbsp;</div></h2>
    <div class="block lines" data-bind="visible: draftOver" style="display: none">
		<div class="columns">
			<div class="col_66">
				<div class="col_50">
					<div class="section">
					    <h2>Your deck is on it's way!</h2>
					    <p>Please be patient while cards make it out to you.</p>
                        <img src="/Images/packbuilding.gif" alt="" />
					</div>
				</div>
				<div class="col_50">
					<div class="section">
					    <p>While the bot packages and delivers cards, you can download your deck below with the green "Get Deck" button. When the bot open trades with you, simply click "Load Wish List" at the top to take the cards. This saves time, and makes the trading process a lot easier!</p>
                        <img src="/Images/load_wish_list.jpg"/>
					</div>
				</div>
			</div>
			<div class="col_33 no_border_right">
			    <div class="section" data-bind="visible: positionInQueue() != -1" style="display: none">
			        <p data-bind="text: positionInQueueText"></p>
			        <table class="static">
			            <tbody data-bind="foreach: queue">
			                <tr class="even">
			                    <td data-bind="text: player.TwitchUsername"></td>
			                    <td data-bind="text: $root.getStatusText(status)"></td>
			                </tr>
			            </tbody>
			        </table>
			    </div>
			    <div class="section" style="text-align: center">
			        <button class="green large large_icon has_text" data-bind="click: builtDeck" style="float: none;">
						<img src="/Images/icons/large/white/blocks_images.png">
						<span>I've built my deck</span>
					</button>
			    </div>
			</div>
		</div>
    </div>
    <div class="section block" data-bind="visible: !selections().length && !waiting().length && !draftOver()" style="display: none; height: 141px;">
        <h2><span data-bind="text: statusText"></span></h2>
    </div>
    <div data-bind="visible: waiting().length" class="section block" style="display: none">
        <h2>Waiting for Players:</h2>
        <ul data-bind="foreach: waiting">
            <li data-bind="text: TwitchUsername"></li>
        </ul>
    </div>
    <div class="isotope_holder indented_area" style="margin: 0;" data-bind="foreach: selections">
        <div style="float: left; padding: 3px;">
            <img draggable="true" data-bind="attr: { src: fullLink($data), alt: Name }, event: {
mousemove: $root.enableDetails, mouseout: $root.disableDetails, click: $root.addSelection
                    , dragstart: function (data, event) {
                        event.originalEvent.dataTransfer.setData('Text', 'selections|' + data.Id);
                        return true;
                    }
            }" style="width: 104px; cursor: pointer;" draggable="true" />
        </div>
    </div>
    <div style="clear: both;"></div>
</div>


<div class="box grid_12">
    <h2 class="box_head">
        Deck
        <button class="light small has_text send_right" data-bind="click: sortByCost">Cost</button>
        <button class="light small has_text send_right" data-bind="click: sortByColor">Color</button>
        <div class="send_right">Sort By: &nbsp;</div>
        <div data-bind="visible: draftOver" class="send_right" style="margin-right: 30px"><button class="green small has_text send_right" data-bind="click: downloadDeck">Get Deck</button></div>
    </h2>
    <div class="block">
        <div class="section" style="min-height: 151px; overflow-x: scroll;" data-bind="event: {
    dragover: function (data, event) { event.preventDefault(); },
    drop: function (data, event) {
                var split = event.originalEvent.dataTransfer.getData('Text').split('|');
                $root.movePick(split[0], split[1]);
            }
        }">
            <table>
                <tr class="cards" data-bind="foreach: columns">
                    <td data-bind="foreach: $data, style: { height: (134 + 20 * $data.length) + 'px' }" style="width: 108px; min-width: 108px; vertical-align: top">
                        <div style="padding: 0 2px 0 2px;" data-bind="attr: { style: 'z-index: ' + $index() + '; ' + ($index() > 0 ? 'margin-top: -135px;' : '') }, event: { /*mouseover: $root.enableDetails, mouseout: $root.disableDetails*/ }">
                            <img data-bind="attr: { src: fullLink($data), alt: Name }, event: {
    dragstart: function(data, event) {
        event.originalEvent.dataTransfer.setData('Text', 'deck|' + data.Id);
        return true; }
                            }" draggable="true" style="width: 104px;" />
                        </div>
                        <div style="clear: both"></div>
                    </td>
                </tr>
            </table>
        </div>
    </div>
</div>



<div class="box grid_4">
    <h2 class="box_head">Sideboard</h2>
    <div class="block">
        <div class="section" style="min-height: 151px" data-bind="event: {
    dragover: function (data, event) { event.preventDefault(); },
    drop: function (data, event) {
        var split = event.originalEvent.dataTransfer.getData('Text').split('|');
        $root.movePick(split[0], split[1], 'sideboard');
    }
}">
            <table>
                <tr class="cards">
                    <td data-bind="foreach: sideboard, visible: sideboard().length > 0, style: { height: (134 + 20 * sideboard().length) + 'px' }">
                        <div data-bind="attr: { style: 'z-index: ' + $index() + '; position: absolute; margin-top: ' + $index()*20 + 'px;' }, event: {/* mouseover: enableDetails, mouseout: disableDetails*/ }">
                            <img data-bind="attr: { src: fullLink($data), alt: Name }, event: {
    dragstart: function (data, event) {
        event.originalEvent.dataTransfer.setData('Text', 'sideboard|' + data.Id);
                                        return true;
                                    }
                                }" style="width: 104px;" />
                        </div>
                    </td>
                </tr>
            </table>
        </div>
    </div>
</div>

@section scripts {
    <!--Script references. -->
    @Scripts.Render("~/Scripts/knockout/knockout.js")
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-1.0.1.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.--> 
    <script type="text/javascript">
        $(function() {
            // Reference the auto-generated proxy for the hub.  
            var mtg = $.connection.cubeHub;
            $.connection.hub.logging = true;

            function draftViewModel() {
                var self = this;
                var draftId = @Model.CubeDraft.Id;
                var botName = "@Model.CubeDraft.BotName";

                var cardPreview = $('<div/>').css({ position: 'absolute', 'z-index': 50 });
                cardPreview.append($('<img/>').css('display', 'none'));
                $('body').append(cardPreview);

                self.packSize = ko.observable(15);
                self.totalPicks = ko.observable(45);
                self.timed = ko.observable(@Model.CubeDraft.Timed.ToString().ToLower());
                self.loaded = ko.observable(false);
                self.players = ko.observableArray(@Html.Raw(Json.Encode(Model.CubeDraft.CubeDraftPlayers.Where(p => p.Confirmed).Select(p => new
                                                      {
                                                          p.Id,
                                                          p.MtgoLink.User.TwitchUsername,
                                                          p.MtgoLink.MtgoUsername,
                                                          p.Position
                                                      }))));
                var myPlayerId = @Model.PlayerId;

                self.queue = ko.observableArray([]);

                var numAddSuffix = function(i) {
                    var j = i % 10;
                    if (j == 1 && i != 11) {
                        return i + "st";
                    }
                    if (j == 2 && i != 12) {
                        return i + "nd";
                    }
                    if (j == 3 && i != 13) {
                        return i + "rd";
                    }
                    return i + "th";
                };

                self.getStatusText = function(number) {
                    switch (number) {
                    case @((int)QueueStatus.Recieved):
                        return "Recieved";
                    case @((int)QueueStatus.Skipped):
                        return "Skipped";
                    case @((int)QueueStatus.Trading):
                        return "Trading";
                    case @((int)QueueStatus.Waiting):
                        return "Waiting";
                    }
                    return "Unknown";
                };

                self.myQueueStatus = ko.computed(function() {
                    var me = ko.utils.arrayFilter(self.queue(), function(player) {
                        return player.player.Id == myPlayerId;
                    })[0];
                        
                    return me ? me.status : -1;
                });

                self.positionInQueue = ko.computed(function() {
                    var me = ko.utils.arrayFilter(self.queue(), function(player) {
                        return player.player.Id == myPlayerId;
                    })[0];

                    var idx = self.queue.indexOf(me);
                    
                    if (idx > -1) {
                        if (me.status == @((int)QueueStatus.Skipped))
                            return -2;

                        if (me.status == @((int)QueueStatus.Recieved))
                            return -3;
                    }

                    

                    /*var currentQueue = ko.utils.arrayFilter(self.queue(), function(player) {
                        return player.status != ((int)QueueStatus.Skipped);
                    });*/

                    return ko.utils.arrayFilter(self.queue(), function(player) {
                        return player.status != @((int)QueueStatus.Skipped) && player.status != @((int)QueueStatus.Recieved);
                    }).indexOf(me);
                });
                
                self.positionInQueueText = ko.computed(function() {
                    var idx = self.positionInQueue();
                    switch ( idx ) {
                        case -3:
                            return "You have recieved all your cards! When you are finished deck building, please hit the \"I've built my deck\" button below.";
                        case -2:
                            return "Whoops, it looks like you were skipped. (Most likely because you either declined the trade or didn't have the required collateral). Please wait until the bot runs through the queue and retrades with you.";
                        case 0:
                            return botName + " should be trading with you momentarily. Please be ready with your deck to make the trade as quickly as possible.";
                        case 1:
                            return "You are currently next. Please be ready with your deck to make the trade as quickly as possible.";
                        default:
                            return "You are currently " + numAddSuffix(idx) + " in the queue.";
                    }
                });
                

                self.waiting = ko.observableArray([]);

                self.selection = ko.observable(false);
                self.selections = ko.observableArray([]);

                self.deck = ko.observableArray(@Html.Raw(Json.Encode(Model.Deck)));
                self.sideboard = ko.observableArray([]);

                /*
                self.currentpick = ko.computed(function() {
                    return Math.min(self.deck().length + self.sideboard().length + 1, 45);
                });*/
                self.currentpick = ko.observable(@Model.CubeDraft.GetCurrentPick(Model.PlayerId));
                self.currentpack = ko.computed(function() {
                    return Math.ceil(self.currentpick() / 15);
                });
                self.sortBy = ko.observable("color");
                self.draftOver = ko.observable(@((Model.CubeDraft.Status != CubeDraftStatus.Drafting).ToString().ToLower()));

                self.myclock = ko.observable(0);

                self.addingLand = ko.observable(false);
                self.swamp = ko.observable(0);
                self.mountain = ko.observable(0);
                self.plains = ko.observable(0);
                self.island = ko.observable(0);
                self.forest = ko.observable(0);

                self.dragsel = "init";

                var timer;

                this.sortByColor = function() {
                    self.sortBy("color");
                };

                this.sortByCost = function() {
                    self.sortBy("cost");
                };

                this.statusText = ko.computed(function() {
                    if ((self.deck().length + self.sideboard().length) % self.packSize() == 0) {
                        return "Pick accepted. Waiting for all players to receive their last pick.";
                    }
                    return "Pick accepted. Waiting for adjacent player to pass your next booster.";
                });

                this.addSelection = function(data) {
                    if (!self.timed())
                        self.movePick('selections', data.Id);
                    else {
                        //A bit more logic needs to go here;
                        self.selectPick('selections', data.Id);
                    }
                };

                this.movePick = function(from, pickId, where) {
                    //console.log([from, pickId, where]);
                    var obj = null;
                    switch (from) {
                    case 'selections':
                        obj = ko.utils.arrayFilter(self.selections(), function(card) {
                            return card.Id == pickId;
                        });

                        if (obj.length == 0)
                            return;

                        obj = obj[0];
                        obj.pickId = pickId;
                        self.selections.removeAll();

                        console.log('Taking pick:');
                        mtg.server.takePick(draftId, self.currentpick(), pickId).fail(function(e) {
                            alert("An error occurred taking this pick. Try refreshing the page, and if danbopes is around, please take a screenshot of this error (If any follows): " + e);
                        });
                        break;
                    case 'deck':
                        obj = ko.utils.arrayFilter(self.deck(), function(card) {
                            return card.Id == pickId;
                        });

                        if (obj.length == 0)
                            return;

                        obj = obj[0];

                        self.deck.remove(obj);
                        break;
                    case 'sideboard':
                        obj = ko.utils.arrayFilter(self.sideboard(), function(card) {
                            return card.Id == pickId;
                        });

                        if (obj.length == 0)
                            return;

                        obj = obj[0];

                        self.sideboard.remove(obj);
                        break;
                    }

                    if (obj == null)
                        return;

                    if (where == 'sideboard') {
                        self.sideboard.push(obj);
                    } else {
                        self.deck.push(obj);
                    }

                    $(cardPreview).find('img').attr('src', '').css('display', 'none');
                    self.draftOver(self.deck().length + self.sideboard().length == self.totalPicks());
                };

                this.columns = ko.computed(function() {
                    var desiredType = self.sortBy();
                    var cards = self.deck();
                    var rowCards = [];
                    var result = [];

                    if (desiredType == "cost") {
                        for (var i = 0; i <= 20; i++) {
                            rowCards = ko.utils.arrayFilter(cards, function(card) {
                                return card.CMC == i;
                            });

                            if (rowCards.length > 0)
                                result.push(rowCards);
                        }
                    } else if (desiredType == "color") {
                        //Match all the colors
                        var colors = ['L', 'C', 'A', 'W', 'U', 'B', 'R', 'G'];

                        $.each(colors, function(idx, color) {
                            rowCards = ko.utils.arrayFilter(cards, function(card) {
                                return card.Color == color;
                            });

                            if (rowCards.length > 0)
                                result.push(rowCards);
                        });

                        //Match multicolored
                        rowCards = ko.utils.arrayFilter(cards, function(card) {
                            return $.inArray(card.Color, colors) == -1;
                        });

                        if (rowCards.length > 0)
                            result.push(rowCards);
                    }

                    //console.log(result);
                    return result;
                });

                toggleLand = function() {
                    var current = self.addingLand();
                    self.addingLand(!current);
                };

                /*this.deck = ko.computed(function () {
                    var sdbIds = new Array();

                    ko.utils.arrayForEach(this.sideboard(), function (item) {
                        sdbIds.push(item.draftId)
                    });

                    return ko.utils.arrayFilter(this.selections(), function (card) {
                        return jQuery.inArray(card.draftId, sdbIds) == -1;
                    });
                }, this);*/

                this.tick = function() {
                    var timeremaining = self.myclock() - 1;
                    if (timeremaining > 0) {
                        self.myclock(timeremaining);
                    } else {
                        //var defaultpick = self.contacts()[0];
                        //self.addSelection(defaultpick);
                        //self.myclock("");
                    }
                };

                this.enableDetails = function(item, event) {
                    /*origz = $(event.target).css('z-index');
                    origw = $(event.target).css('width');
                    $(event.target).css('position', 'absolute');

                    $(event.target).css('z-index', '1000');
                    $(event.target).css('width', 'auto');*/

                    var img = $(cardPreview).find('img');

                    img.attr('src', fullLink(item)).css('display', 'block');

                    var left = event.pageX + 10;

                    if (left + img.width() + 10 > $(window).width())
                        left = $(window).width() - img.width() - 10;


                    $(cardPreview).css({ top: event.pageY + 10, left: left });
                    //console.log(event);
                };

                this.disableDetails = function(item, event) {
                    /*$(event.target).css('width', origw);
                    $(event.target).css('z-index', origz);
                    $(event.target).css('position', 'static');*/
                    $(cardPreview).find('img').attr('src', '').css('display', 'none');
                };

                this.downloadDeck = function() {
                    /*var mysideboard = JSON.stringify(self.sideboard());*/
                    var sideboardIds = ko.utils.arrayMap(this.sideboard(), function(card) {
                        return card.Id;
                    });
                    $("body").append("<iframe src='" + "/CubeDraft/Deck/" + draftId + "?sideboard=" + sideboardIds.join(',') + "' style='display: none;' ></iframe>");
                };

                this.builtDeck = function() {
                    mtg.server.builtDeck(draftId).done(function() {
                        location.href = "/CubeDraft/View/" + draftId;
                    });
                };

                //Let's attach to some events
                mtg.client.waitingForPlayers = function(playerIds) {
                    self.waiting(ko.utils.arrayFilter(self.players(), function(player) {
                        return $.inArray(player.Id, playerIds) > -1;
                    }));
                };

                mtg.client.pendingSelection = function(pickId, cards, time) {
                    self.currentpick(pickId);
                    self.selections(cards);
                    self.waiting.removeAll();

                    if (timer > -1) {
                        //TODO in the future
                        if (time != undefined) {
                            clearTimeout(self.timer);
                        }

                        self.myclock(time);
                        setInterval(self.tick, 1000);
                    }
                };

                mtg.client.draftSelection = function(card, pickId) {
                    //TODO
                    console.log(card, pickId);
                };

                mtg.client.queueUpdate = function(queue) {
                    self.queue.removeAll();
                    console.log("Queue Update");
                    console.log(queue);
                    $.each(queue, function(idx, queueStatus) {
                        var player = ko.utils.arrayFilter(self.players(), function(player) {
                            return player.Id == queueStatus.PlayerId;
                        })[0];
                        
                        self.queue.push({
                            status: queueStatus.Status,
                            player: player
                        });
                    });
                    
                    if (self.positionInQueue() == 0 && self.myQueueStatus() == @((int)QueueStatus.Trading) && window.webkitNotifications && window.webkitNotifications.checkPermission() == 0) {
                        window.webkitNotifications.createNotification("/Images/logo-notification.png", "MTGBot.tv", botName + " should be trading you with your deck momentarily.").show();
                    }

                    console.log("My position in the queue: " + self.positionInQueue());
                };


                /*
                
                self.submitLandFromForm = function(formElement) {
                    // If valid, post the serialized form data to the web api
                    var jsonform = $(formElement).serializeObject();
                    var selection = JSON.stringify(jsonform);
                    toggleLand();

                    $.ajax({
                        url: "/api/Draft",
                        type: "PUT",
                        data: selection,
                        datatype: "json",
                        contentType: "application/json; charset=utf-8",
                    })
                        .done(function(postreturn) {
                            self.selections(postreturn.Picks);
                            //self.selections.push(data);
                        });

                };

               self.getDraft = function () {
                   $.getJSON("/api/Draft")
                       .done(function (data) {
                           if (data.CurrentPack.packCards != null) {
                               self.contacts(data.CurrentPack.packCards);
                               self.myclock(40);
                               timer = setInterval(self.tick, 1000);
                               self.loaded(true);
                               clearInterval(refresher);
                           }

                       });
                   if (self.selections().length > 44) {
                       clearInterval(timer);
                       self.draftOver(true);
                   }
               }*/

                /*this.land = ko.computed(function () {
                    return ko.utils.arrayFilter(this.deck(), function (card) {
                        return String(card.Colours) == "L";
                    });
                }, this);*/


                /*suggestLand = function () {
                    self.sortBy("colour");
                    var cards = self.deck().length - self.land().length;
                    var lands = Math.round(0.74 * cards);
                    var total = lands + cards;
                    var swampcount = Math.round((self.selections3c().length / cards) * lands) + Math.round((self.selections3c().length / cards) * self.selections7c().length);
                    var plainscount = Math.round((self.selections6c().length / cards) * lands) + Math.round((self.selections6c().length / cards) * self.selections7c().length);
                    var islandcount = Math.round((self.selections2c().length / cards) * lands) + Math.round((self.selections2c().length / cards) * self.selections7c().length);
                    var mountaincount = Math.round((self.selections4c().length / cards) * lands) + Math.round((self.selections4c().length / cards) * self.selections7c().length);
                    var forestcount = Math.round((self.selections5c().length / cards) * lands) + Math.round((self.selections5c().length / cards) * self.selections7c().length);
                    self.swamp(swampcount);
                    self.plains(plainscount);
                    self.island(islandcount);
                    self.mountain(mountaincount);
                    self.forest(forestcount);
                }*/

                // Load the initial state
                // <img data-bind="attr: { src: Self + '.png'}" /> click: $parent.addSelection(media.m)
                /*$.getJSON("/api/Draft",
                  function (data) {
                      self.contacts(data.CurrentPack.packCards);
                      self.selections(data.Picks);
                  })
                    .done(function () {
                        self.loaded(true);
                        self.myclock(40);
                        timer = setInterval(self.tick, 1000);
                        if (self.selections().length > 44) {
                            clearInterval(timer);
                            self.draftOver(true);
                        }
                    });*/
            }

            ;

            $.fn.serializeObject = function() {
                var o = {};
                var a = this.serializeArray();
                $.each(a, function() {
                    if (o[this.name]) {
                        if (!o[this.name].push) {
                            o[this.name] = [o[this.name]];
                        }
                        o[this.name].push(this.value || '');
                    } else {
                        o[this.name] = this.value || '';
                    }
                });
                return o;
            };

            ko.applyBindings(new draftViewModel());

            mtg.client.addVote = function(pickId, card, username) {
                console.log("Add Vote");
                console.log({ pickId: pickId, card: card, username: username });
                console.log(votes);

                if (votes[pickId]) {
                    if (!votes[pickId][card.Id]) {
                        votes[pickId][card.Id] = {
                            li: null,
                            votes: 0
                        };
                    }
                } else {
                    votes[pickId] = {
                        totalVotes: 0
                    };
                    votes[pickId][card.Id] = {
                        li: null,
                        votes: 0
                    };
                }

                votes[pickId].totalVotes++;
                votes[pickId][card.Id].votes++;

                if (votes.currentVote == null || votes.currentVote != pickId) {
                    return;
                }

                if (votes[pickId][card.Id].li != null) {
                    /*$(votes[vote.Id].li).find('div.content table tbody').append(
                        $('<tr />').append(
                            $('<td />').text(username)
                        )
                    );*/
                    votes[pickId][card.Id].li.find('span.vote').text(votes[pickId][card.Id].votes);
                    //$('#votes').accordion('refresh');
                } else {
                    var li = $('<li />').append(
                        $('<h3 class="bar" style="text-shadow: none" />').append(
                            $('<span />').css('padding-left', 10).text(card.Name)
                        ).append(
                            $('<span class="vote" />').css({ 'padding-right': 10, 'float': 'right' }).text(votes[pickId][card.Id].votes)
                        )
                    )/*.append(
                        $('<div class="content" />').append(
                            $('<table class="static" />').append(
                                $('<tbody />').append(
                                    $('<tr />').append(
                                        $('<td />').text(username)
                                    )
                                )
                            )
                        )
                    )*/;

                    $('#votes').isotope({
                        getSortData: {
                            votes: function($elem) {
                                return parseInt($elem.data('votes'));
                            }
                        },
                        sortBy: 'votes',
                        sortAscending: false
                    }).isotope('insert', li);
                    //$('#votes').accordion('refresh');
                    votes[pickId][card.Id].li = li;

                    $(li).find('h3').progressbar({
                        create: function() {
                            $(this).find('div.ui-progressbar-value').removeClass('red yellow green');

                            var value = this.getAttribute("aria-valuenow");
                            if (value < 30) {
                                $(this).find('div.ui-progressbar-value').addClass('red');
                            } else if (value < 60) {
                                $(this).find('div.ui-progressbar-value').addClass('yellow');
                            } else {
                                $(this).find('div.ui-progressbar-value').addClass('green');
                            }
                        },
                        change: function() {
                            $(this).find('div.ui-progressbar-value').removeClass('red yellow green');

                            var value = this.getAttribute("aria-valuenow");
                            if (value < 30) {
                                $(this).find('div.ui-progressbar-value').addClass('red');
                            } else if (value < 60) {
                                $(this).find('div.ui-progressbar-value').addClass('yellow');
                            } else {
                                $(this).find('div.ui-progressbar-value').addClass('green');
                            }
                        },
                        value: Math.floor(votes[pickId][card.Id].votes / votes[pickId].totalVotes * 100)
                    });
                }

                $.each(votes[pickId], function(idx, vote) {
                    if (!vote.li) return;
                    $(vote.li).find('h3').progressbar('value', Math.floor(vote.votes / votes[pickId].totalVotes * 100));
                    $(vote.li).data('votes', vote.votes);
                });

                $('#votes').isotope('reloadItems').isotope({ sortBy: 'votes' }).isotope('reLayout');
                /*
                var ul = $('#votes');
                var li = ul.children('li');

                li.sort(function(a, b) {
                    return ( $(a).data('votes') < $(b).data('votes') ) ? 1 :
                    ( $(a).data('votes') > $(b).data('votes') ) ? -1 : 0;
                });
                ul.append(li);
                */

                //<li><h3 class="bar">Blowfly Infestation</h3><div class="content" style="display: none" /></li>
                //<li><h3 class="bar">Boon Reflection</h3><div class="content" style="display: none" /></li>
            };

            // Set initial focus to message input box.  
            $('#tabs-pack1, #tabs-pack2, #tabs-pack3').find('ul').accordion('option', 'active', false);

            // Start the connection.
            $.connection.hub.start().done(function() {
                console.log("subscribing to draft: ", @Model.CubeDraft.Id);
                mtg.server.subscribeToDrafting(@Model.CubeDraft.Id);

                /*$('#sendmessage').click(function () {
                        // Call the Send method on the hub. 
                        chat.server.send($('#message').val());
                        // Clear text box and reset focus for next comment. 
                        $('#message').val('').focus();
                    });*/
            });
            // This optional function html-encodes messages for display in the page.
        });

        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>
}