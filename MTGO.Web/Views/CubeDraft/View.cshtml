@using MTGO.Database.Models.CubeDrafting
@model MTGO.Web.Models.CubeDraftViewModel

@{
    ViewBag.Title = "Cube Draft";
    ViewBag.Description = Model.DraftName;
}

<style type="text/css">
    #main_tabs > .ui-tabs-nav li a {
        float: inherit;
        padding: inherit;
        text-decoration: inherit;
        font-size: inherit;
        font-weight: inherit;
        text-shadow: inherit;
    }

    #main_tabs > .ui-widget-header {
        background-color: inherit;
        margin-bottom: 5px;
    }

    #main_tabs > .ui-tabs-nav li {
        list-style: inherit;
        float: left;
        position: inherit;
        top: inherit;
        margin: 0 5px 0 0;
        border-bottom: inherit !important;
        padding: 5px;
        white-space: inherit;
        -moz-box-shadow: inherit;
        -webkit-box-shadow: inherit;
        box-shadow: inherit;
    }

    #main_tabs > .ui-tabs-nav {
        padding-bottom: 2px;
    }

    #main_tabs .toggle_container, #main_tabs .ui-tabs-panel {
        background: none;
        padding: 0;
    }

    #main_tabs .ui-corner-tl {
        display: none;
    }

    #main_tabs .dataTables_scrollHeadInner {
        display: none;
    }

    table#pending_players, table#accepted_players {
        width: 100% !important;
    }

    table#pending_players td, table#accepted_players td {
        vertical-align: middle;
    }

    table#pending_players tr, table#accepted_players tr {
        cursor: pointer;
    }

    table#pending_players td.image, table#accepted_players td.image {
        width: 40px;
    }
</style>

<div class="grid_16 tabs" id="main_tabs" style="opacity: 1;">
    <ul class="clearfix">
        <li class="light img_icon has_text button">
            <img src="/Images/icons/small/grey/users.png" alt="">
            <span><a href="#tabs-players">Players</a></span>
        </li>
        <li class="light img_icon has_text button">
            <img src="/Images/icons/small/grey/blocks_images.png" alt="">
            <span><a href="#tabs-cards">Cards</a></span>
        </li>
        <li class="light img_icon has_text button" data-bind="visible: currentRound() > 0">
            <img src="/Images/icons/small/grey/winner_podium.png" alt="">
            <span><a href="#tabs-standings">Standings</a></span>
        </li>
        <li class="light img_icon has_text button" data-bind="visible: currentRound() > 0">
            <img src="/Images/icons/small/grey/clipboard.png" alt="">
            <span><a href="#tabs-pairings">Pairings</a></span>
        </li>
    </ul>
    <h2 class="send_right" style="margin: -30px 10px 0 0">Draft Status: <span data-bind="text: statusText"></span></h2>
    <!--
    <div class="controls">
        <a href="#" class="grabber"></a>
        <a href="#" class="toggle"></a>
    </div>
    -->
	<div class="toggle_container">
	    <div id="tabs-players" class="container_16 clearfix" style="display: none">
	        <div class="box grid_8" style="opacity: 1;">
	            <h2 class="box_head grad_green">Players &nbsp;Accepted &nbsp;(Max #<span data-bind="text: supportedPlayers"></span>)</h2>
	            <div class="controls">
	                <a href="#" class="grabber"></a>
	            </div>
	            <div class="block" style="opacity: 1;">
	                <table id="accepted_players" class="datatable">
	                    <thead>
	                        <tr>
	                            <th style="width: 40px">I</th>
	                            <th style="width: 50%">Username</th>
	                            <th style="width: 50%">Mtgo Username</th>
                                <th style="width: 40px">Collateral</th>
	                            <th style="width: 40px"></th>
	                            <th style="width: 40px"></th>
	                            <th style="width: 40px"></th>
	                        </tr>
	                    </thead>
	                    <tbody></tbody>
	                </table>
	            </div>
	            <div class="button_bar clearfix" data-bind="visible: isBroadcaster" style="display: none">
	                <button class="red text_only has_text send_right" data-bind="click: endTournament, visible: status() == @((int)CubeDraftStatus.InMatches)">
	                    <span>End Tournament</span>
	                </button>
	                <button class="green text_only has_text send_right" data-bind="click: pairNextRound, visible: status() == @((int)CubeDraftStatus.InMatches)">
	                    <span>Pair Next Round</span>
	                </button>
	                <button class="text_only has_text send_right" data-bind="click: startDraft, enable: acceptedPlayers().length > 1, css: { red: acceptedPlayers().length < 2, green: acceptedPlayers().length > 1 }, visible: status() == @((int)CubeDraftStatus.PreStart)">
	                    <span>Start Draft</span>
	                </button>
	                <button class="green text_only has_text send_right" data-bind="click: performReadyCheck">
	                    <span>Readycheck</span>
	                </button>
	            </div>
	        </div>
	        <div class="box grid_8 single_datatable" style="opacity: 1;">
	            <h2 class="box_head grad_red">Players &nbsp;Waiting</h2>
	            <div class="controls">
	                <a href="#" class="grabber"></a>
	                <a href="#" class="toggle"></a>
	            </div>
	            <div class="block" style="opacity: 1;">
	                <table id="pending_players" class="datatable">
	                    <thead>
	                        <tr>
	                            <th style="width: 40px">I</th>
	                            <th style="width: 100%">Username</th>
	                        </tr>
	                    </thead>
	                    <tbody></tbody>
	                </table>
	            </div>
	            <div class="button_bar clearfix">
	                <button class="green text_only has_text send_right" data-bind="visible: !isPlayer(), click: signUp">
	                    <span>Signup for this Draft</span>
	                </button>
	                <button class="green text_only has_text send_right" data-bind="visible: isBroadcaster, click: approveRandom" style="display: none">
	                    <span>Choose a Random Player</span>
	                </button>
	            </div>
	        </div>
	    </div>
		<div id="tabs-cards" style="opacity: 1;">
		    <div class="box grid_16">
		        <h2 class="box_head">
		            Cards:&nbsp; <div data-bind="text: cards().length" style="display: inline;">&nbsp;</div>&nbsp;&nbsp;&nbsp; (Supported Players:&nbsp; <div data-bind="text: supportedPlayers()" style="display: inline;">&nbsp;</div>)
		            <button class="light small has_text send_right" data-bind="click: sortByCost">Cost</button>
		            <button class="light small has_text send_right" data-bind="click: sortByColor">Color</button>
		            <div class="send_right">Sort By: &nbsp;</div>
		        </h2>
		        <div class="block">
		            <div class="section">
		                <table>
		                    <tr class="cards" data-bind="foreach: columns">
		                        <td data-bind="foreach: $data, style: { height: (134 + 20 * $data.length) + 'px' }" style="width: 108px">
		                            <div style="padding: 0 2px 0 2px" data-bind="attr: { style: 'z-index: ' + $index() + '; position: absolute; margin-top: ' + $index() * 20 + 'px;' }, event: { mouseover: $root.enableDetails, mouseout: $root.disableDetails }">
		                                <img data-bind="attr: { src: thumbLink($data), alt: Name }" />
		                            </div>
		                            <div style="clear: both"></div>
		                        </td>
		                    </tr>
		                </table>
		            </div>
		        </div>
		    </div>
		</div>
	    <div id="tabs-standings">
	        <div class="box grid_16 single_datatable" style="opacity: 1;">
	            <h2 class="box_head">Standings</h2>
	            <div class="block" style="opacity: 1;">
	                <table id="standings" class="static">
	                    <thead>
	                        <tr>
	                            <th colspan="3">&nbsp;</th>
	                            <th colspan="3" style="text-align: center;">Tie Breakers</th>
	                        </tr>
	                        <tr>
	                            <th style="width: 20px">Place</th>
                                <th style="width: 20px">Points</th>
	                            <th style="width: 100%">Username</th>
	                            <th>OMW</th>
	                            <th>GWP</th>
	                            <th>OGW</th>
	                        </tr>
	                    </thead>
	                    <tbody data-bind="foreach: standings">
	                        <tr>
	                            <td data-bind="text: Place"></td>
	                            <td data-bind="text: Player.Wins*3"></td>
	                            <td data-bind="text: Player.PlayerName + ' (' + Player.MtgoUsername + ')'"></td>
	                            <td data-bind="text: Player.TieBreaker1 + '%'"></td>
	                            <td data-bind="text: Player.TieBreaker2 + '%'"></td>
                                <td data-bind="text: Player.TieBreaker3 + '%'"></td>
	                        </tr>
	                    </tbody>
	                </table>
	            </div>
	        </div>
	    </div>
        <div id="tabs-pairings">
	        <div class="box grid_16 single_datatable" style="opacity: 1;">
	            <h2 class="box_head" data-bind="text: 'Pairings (Round ' + currentRound() + ')'"></h2>
	            <div class="block" style="opacity: 1;">
	                <table id="pairings" class="static">
	                    <thead>
	                        <tr>
	                            <th>Game</th>
	                            <th>Player1</th>
	                            <th>Player2</th>
                                <th>Current Score</th>
	                        </tr>
	                    </thead>
	                    <tbody data-bind="foreach: pairings">
	                        <tr>
	                            <td data-bind="text: CurrentGame == -1 ? 'Completed' : CurrentGame"></td>
	                            <td data-bind="text: Player1.PlayerName + ' (' + Player1.MtgoUsername + ')'"></td>
	                            <td data-bind="text: Player2 == null ? '*** BYE ***' : Player2.PlayerName + ' (' + Player2.MtgoUsername + ')'"></td>
                                <td data-bind="text: Player1Wins + '-' + Player2Wins"></td>
	                        </tr>
	                    </tbody>
	                </table>
	            </div>
	        </div>
	    </div>
	</div>
</div>

<script id="user_dialog" type="text/x-jquery-tmpl">
    <div class="box light grid_16 full_size main_container">
        <h2 class="box_head">Approve Player</h2>
        <div class="block" style="opacity: 1;">
            <div class="columns clearfix">
                <div class="col_25">
                    <div class="section">
                        <img id="contactImage" width="50" alt="Profile Pic" src="${Image}" />
                    </div>
                </div>
                <div class="col_75">
                    <div class="section">
                        <h2>${TwitchUsername}</h2>
                        <h3>MTGO Username: ${MtgoUsername}</h3>
                    </div>
                </div>
            </div>
            <div class="columns clearfix">
                <div class="col_100">
                    <fieldset class="label_side top">
                        <label><img src="/Images/icons/small/grey/power.png" alt="" style="float: left; margin-top: -3px;" /> Joins:</label>
                        <div class="clearfix" style="padding-top: 20px">
                            ${Joins}
                        </div>
                    </fieldset>

                    <fieldset class="label_side">
                        <label><img src="/Images/icons/small/grey/user_comment.png" alt="" style="float: left; margin-top: -3px;" />Chat Lines:</label>
                        <div class="clearfix" style="padding-top: 20px">
                            ${MessageCount}
                        </div>
                    </fieldset>
                    <fieldset class="label_side">
                        <label><img src="/Images/icons/small/grey/money.png" alt="" style="float: left; margin-top: 3px;" />Require Collateral:</label>
                        <div class="clearfix">
                            <input name="collateral" type="text" class="text" value="${RequireCollateral}" />
                        </div>
                    </fieldset>
                    {{if Approved}}
                    <fieldset class="no_label">
                        <div class="uniform inline clearfix">
                            <label for="approved">
                                <div class="checker" id="uniform-approved">
                                    <span>
                                        <input type="checkbox" name="approved" value="1" checked="checked" />
                                    </span>
                                </div>
                                Player is approved.
                            </label>
                        </div>
                    </fieldset>
                    {{/if}}
                    <!--<fieldset class="label_side">
                            <label><img src="/Images/icons/small/grey/pencil.png" alt="" />Notes:</label>
                            <div class="clearfix">
                                ${Notes}
                            </div>
                        </fieldset>-->
                </div>
            </div>
            <div class="button_bar clearfix">
                {{if Approved}}
                <button class="green img_icon has_text update">
                    <img src="/Images/icons/small/white/bended_arrow_left.png" alt="">
                    <span>Update</span>
                </button>
                {{else}}
                <button class="green img_icon has_text approve">
                    <img src="/Images/icons/small/white/bended_arrow_left.png" alt="">
                    <span>Approve</span>
                </button>
                {{/if}}

                <button class="dark send_right img_icon has_text cancel">
                    <div class="ui-icon ui-icon-closethick"></div>
                    <span>Cancel</span>
                </button>
            </div>
        </div>
    </div>
</script>

<div class="dialog_content no_dialog_titlebar wide" id="dialog_mtgolink" style="display: none">
    <div class="box light grid_16 full_size main_container">
        <h2 class="box_head">Link your MTGO Username</h2>
        <div class="controls">
            <div class="wizard_progressbar"></div>
        </div>
        <div class="toggle_container">
            <div class="wizard">

                <div class="wizard_steps">
                    <ul class="clearfix">
                        <li class="current">
                            <a href="#link_step_1" class="clearfix">
                                <span>1. <strong>MTGO Username</strong></span>
                            </a>
                        </li>
                        <li>
                            <a href="#link_step_2" class="clearfix">
                                <span>2. <strong>Confirm Code</strong></span>
                            </a>
                        </li>
                        <li>
                            <a href="#link_step_3" class="clearfix">
                                <span>3. <strong>Finish</strong></span>
                            </a>
                        </li>
                    </ul>
                </div>

                <div class="wizard_content">
                    <form action="#" method="post" class="validate_form">
                        <div data-step="1" class="step block" style="display:block;">
                            <div class="section">
                                <h2>1. MTGO Username</h2>
                                <p>Please enter your MTGO username below, and make sure you are online to recieve the confirmation code that will be sent do you.</p>
                            </div>
                            <div class="columns clearfix">
                                <fieldset class="label_side top">
                                    <label>Name</label>
                                    <div>
                                        <input type="text" name="mtgousername" class="required" minlength="3" maxlength="29">
                                        <div class="required_tag"></div>
                                    </div>
                                </fieldset>
                            </div>

                            <div class="button_bar clearfix">
                                <button class="next_step forward send_right" type="button">
                                    <img height="24" width="24" alt="Bended Arrow Right" src="/Images/icons/small/white/bended_arrow_right.png">
                                    <span>Next Step</span>
                                </button>
                            </div>
                        </div>

                        <div data-step="2" class="step block">
                            <div class="section">
                                <h2>2. Confirm Code</h2>
                                <p>A confirmation code should have been sent to you on Magic: Online. Please enter the code below.</p>
                            </div>
                            <div class="columns clearfix">
                                <fieldset class="label_side top">
                                    <label>Code</label>
                                    <div>
                                        <input type="text" name="confirmkey" id="confirmkey" class="required number" minlength="4" maxlength="4">
                                        <div class="required_tag"></div>
                                    </div>
                                </fieldset>
                            </div>
                            <div class="button_bar clearfix">
                                <button class="next_step forward send_right" type="button">
                                    <img height="24" width="24" alt="Bended Arrow Right" src="/Images/icons/small/white/bended_arrow_right.png">
                                    <span>Next Step</span>
                                </button>
                            </div>
                        </div>

                        <div data-step="3" class="step block">
                            <div class="section">
                                <h2>3. Finish</h2>
                                <p>Thank you for confirming your username. Please click complete to signup for this draft.</p>
                            </div>

                            <div class="button_bar clearfix">
                                <button class="finish green send_right submit_button" type="button">
                                    <img height="24" width="24" alt="Bended Arrow Right" src="/Images/icons/small/white/bended_arrow_right.png">
                                    <span>Complete</span>
                                </button>
                            </div>
                        </div>
                    </form>
                </div>

            </div>
        </div>
    </div>
</div>

<div style="display: none">
    <div id="dialog_readycheck" class="dialog_content narrow no_dialog_titlebar" title="Ready Check Dialog">
        <div class="block">
            <div class="section">
                <h1>Ready Check</h1>
                <div class="dashed_line"></div>	
                <p>@Model.Broadcaster.Name has initiated a ready check.</p>
                <p>Are you ready?</p>
            </div>
            <div class="button_bar clearfix">
                <button class="green no_margin_bottom send_right close_dialog">
                    <div class="ui-icon ui-icon-check"></div>
                    <span>Ready</span>
                </button>
                <button class="red send_right close_dialog">
                    <div class="ui-icon ui-icon-closethick"></div>
                    <span>Not Ready</span>
                </button>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <!--Script references. -->
    @Scripts.Render("~/Scripts/knockout/knockout.js")
    <!--The jQuery library is required and is referenced by default in _Layout.csshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-1.0.1.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.--> 
    <script>
        $(function() {
            // Reference the auto-generated proxy for the hub.  
            var mtg = $.connection.cubeHub;
            $.connection.logging = true;

            var draftId = @ViewContext.RouteData.Values["id"];
            var readyCheckGuid = null;
            // Create a function that the hub can call back to display messages.
            /*mtg.client.addNewMessageToPage = function (name, message) {
                // Add the message to the page. 
                $('#discussion').append('<li><strong>' + htmlEncode(name) 
                    + '</strong>: ' + htmlEncode(message) + '</li>');
            };*/

            //Init data table
            var pendingDataTable = $('#pending_players').dataTable({
                bJQueryUI: true,
                bSortClasses: false,
                //bAutoWidth: true,
                bInfo: true,
                sScrollX: "101%",
                bScrollCollapse: true,
                sPaginationType: "full_numbers",
                bRetrieve: true,
                bFilter: false,
                bLengthChange: false,
                aaSorting: [[1, 'asc']],
                aoColumns: [
                    {
                        sClass: 'image',
                        mData: function(obj) {
                            return $('<img alt="Player Image" />').attr('src', obj.smallImage).css({ width: 28, height: 28 })[0].outerHTML;
                        }
                    }, {
                        sClass: 'username',
                        mData: 'displayName'
                    }
                ],
                oLanguage: {
                    sEmptyTable: "There are no players waiting! Send some players to this page to signup.",
                    sInfo: "Showing _START_ to _END_ of _TOTAL_ players.",
                    sInfoEmpty: "No players signed up."
                },
                fnInitComplete: function() {
                    $("#pending_players .dataTables_length > label > select").uniform();
                    $("#pending_players .dataTables_filter input[type=text]").addClass("text");
                    $(".datatable").css("visibility", "visible");
                }
            });

            //Init data table
            var acceptedDataTable = $('#accepted_players').dataTable({
                bJQueryUI: true,
                bSortClasses: false,
                //bAutoWidth: true,
                bInfo: true,
                sScrollX: "101%",
                bScrollCollapse: true,
                sPaginationType: "full_numbers",
                bRetrieve: true,
                bFilter: false,
                bLengthChange: false,
                bPaginate: false,
                aaSorting: [[1, 'asc']],
                aoColumns: [
                    {
                        sClass: 'image',
                        mData: function(obj) {
                            return $('<img alt="Player Image" />').attr('src', obj.smallImage).css({ width: 28, height: 28 })[0].outerHTML;
                        }
                    }, {
                        sClass: 'username',
                        mData: 'displayName'
                    }, {
                        sClass: 'mtgusername',
                        mData: 'mtgoUsername'
                    }, {
                        sClass: 'collateral',
                        mData: 'collateral'
                    }, {
                        mData: function(obj) {
                            switch (obj.readyCheck) {
                            case "pending":
                                return '<div class="ui-icon ui-icon-help" title="Readycheck is pending"></div>';
                            case "ready":
                                return '<div class="ui-icon ui-icon-check"></div>';
                            case "notready":
                                return '<div class="ui-icon ui-icon-closethick"></div>';
                            }

                            return '';
                        }
                    }, {
                        mData: function(obj) {
                            if ( obj.tradeStatus )
                                return '<div class="ui-icon ui-icon-transferthick-e-w" title="Currently trading with this player"></div>';
                            
                            return '';
                        }
                    }, {
                        mData: function(obj) {
                            switch (obj.collectionStatus) {
                            case "full":
                                return '<img src="/Images/icons/small/white/blocks_images.png" title="This player currently has his full deck">';
                            case "partial":
                                return '<img src="/Images/icons/small/white/blocks_images_partial.png" title="This player currently has his some cards">';
                            }
                            return '';
                        }
                    }
                ],
                oLanguage: {
                    sEmptyTable: "@(ViewBag.IsBroadcaster ? "There are no accepted players! Add some by clicking on them from the right." : "There are no accepted players yet.")",
                    sInfo: "Showing _START_ to _END_ of _TOTAL_ players",
                    sInfoEmpty: "No approved players."
                },
                fnInitComplete: function() {
                    $("#accepted_players .dataTables_length > label > select").uniform();
                    $("#accepted_players .dataTables_filter input[type=text]").addClass("text");
                    $(".datatable").css("visibility", "visible");
                }
            });

            var viewModel = function() {
                var self = this;
                this.cards = ko.observableArray([]);
                this.sortBy = ko.observable("color");
                this.pendingPlayers = ko.observableArray([]);
                this.acceptedPlayers = ko.observableArray([]);
                this.status = ko.observable(@((int) Model.Status));
                this.isBroadcaster = ko.observable(@ViewBag.IsBroadcaster.ToString().ToLower());
                this.myUserid = @Context.User.GetUserId();
                this.readyCheck = null;
                this.currentRound = ko.observable(0);
                this.pairings = ko.observableArray([]);
                this.standings = ko.observableArray([]);

                this.supportedPlayers = ko.computed(function() {
                    return Math.min(Math.floor(self.cards().length / 45), 10);
                });

                this.isApprovedPlayer = ko.computed(function() {
                    return ko.utils.arrayFilter(self.acceptedPlayers(), function(player) {
                        return player.userId == self.myUserid;
                    }).length > 0;
                });

                this.isPlayer = ko.computed(function() {
                    return self.isApprovedPlayer() || ko.utils.arrayFilter(self.pendingPlayers(), function(player) {
                        return player.userId == self.myUserid;
                    }).length > 0;
                });

                this.statusText = ko.computed(function() {
                    switch (self.status()) {
                    case @((int) CubeDraftStatus.Init):
                    case @((int) CubeDraftStatus.PreStart):
                        return "Signups";
                    case @((int) CubeDraftStatus.Drafting):
                        return "Drafting";
                    case @((int) CubeDraftStatus.ProductHandOut):
                        return "Product Handout";
                    case @((int) CubeDraftStatus.InMatches):
                        return self.currentRound() > 0 ? "In Matches" : "Deck Construction";
                    case @((int) CubeDraftStatus.ProductHandIn):
                        return "Product Handin";
                    case @((int) CubeDraftStatus.Completed):
                        return "Completed";
                    }
                    return "Unknown";
                });

                this.sortByColor = function() {
                    self.sortBy("color");
                };

                this.sortByCost = function() {
                    self.sortBy("cost");
                };

                this.columns = ko.computed(function() {
                    var desiredType = self.sortBy();
                    var cards = self.cards();
                    var rowCards = [];
                    var result = [];

                    if (desiredType == "cost") {
                        for (var i = 0; i <= 20; i++) {
                            rowCards = ko.utils.arrayFilter(cards, function(card) {
                                return card.CMC == i;
                            });

                            if (rowCards.length > 0)
                                result.push(rowCards);
                        }
                    } else if (desiredType == "color") {
                        //Match all the colors
                        var colors = ['L', 'C', 'W', 'U', 'B', 'R', 'G'];

                        $.each(colors, function(idx, color) {
                            rowCards = ko.utils.arrayFilter(cards, function(card) {
                                return card.Color == color;
                            });

                            if (rowCards.length > 0)
                                result.push(rowCards);
                        });

                        //Match multicolored
                        rowCards = ko.utils.arrayFilter(cards, function(card) {
                            return $.inArray(card.Color, colors) == -1;
                        });

                        if (rowCards.length > 0)
                            result.push(rowCards);
                    }

                    //console.log(result);
                    return result;
                });


                //Hover over functions
                var origz, origw;
                this.enableDetails = function(item, event) {
                    origz = $(event.target).parent().css('z-index');
                    origw = $(event.target).css('width');

                    $(event.target).parent().css('z-index', '1000');
                    $(event.target).css('width', 'auto');
                };
                this.disableDetails = function(item, event) {
                    $(event.target).css('width', origw);
                    $(event.target).parent().css('z-index', origz);
                };

                var approvePlayer = function(data) {
                    if (!data)
                        return;

                    showLoadingOverlay();
                    mtg.server.getPlayerInfo(draftId, data.id).done(function(player) {
                        hideLoadingOverlay();
                        player.Image = data.largeImage;
                        var dialog = $('#user_dialog').tmpl(player);
                        dialog.find(".uniform input, .uniform, .uniform a, .time_picker_holder select").uniform();

                        dialog.find('button.approve').click(function() {
                            var val = dialog.find('input[name=collateral]').val();
                            if (val == '')
                                val = 0;
                            else {
                                val = parseInt(val);
                                if (isNaN(val) || val < 0 || val > 500) {
                                    alert('Invalid collateral.');
                                    return false;
                                }
                            }
                            if (acceptedDataTable.fnGetData().length >= vm.supportedPlayers()) {
                                alert('You have reached your limit for supported players.');
                                return false;
                            }
                            mtg.server.updatePlayer(draftId, player.Id, true, val);
                            dialog.dialog('close');
                        });

                        dialog.find('button.update').click(function() {
                            var val = dialog.find('input[name=collateral]').val();
                            if (val == '')
                                val = 0;
                            else {
                                val = parseInt(val);
                                if (isNaN(val) || val < 0 || val > 500) {
                                    alert('Invalid collateral.');
                                    return false;
                                }
                            }
                            mtg.server.updatePlayer(draftId, player.Id, $(dialog).find('input[name=approved]').is(':checked'), val);
                            dialog.dialog('close');
                            return false;
                        });

                        dialog.find('button.cancel').click(function() {
                            dialog.dialog('close');
                        });

                        dialog.dialog({
                            autoOpen: false,
                            resizable: false,
                            modal: true,
                            width: "500",
                            show: { effect: "fade", duration: 500 },
                            hide: { effect: "fade", duration: 500 },
                            create: function() {
                                $(this).dialog('option', 'dialogClass', 'no_dialog_titlebar');
                            },
                            open: function() {
                                setTimeout(columnHeight, 100);
                            }
                        }).dialog('open');
                    });
                };

                /* Add a click handler to the rows - this could be used as a callback */
                if (this.isBroadcaster()) {
                    $("#pending_players tbody, #accepted_players tbody").click(function(event) {
                        var data = $(event.target).parents('table').dataTable().fnGetData($(event.target).parents('tr')[0]);
                        approvePlayer(data);
                    });
                }

                this.signUp = function() {
                    try {
                        if (window.webkitNotifications.checkPermission() == 1) {
                            console.log("Requesting Permission to Send Notifications");
                            window.webkitNotifications.requestPermission();
                        }
                    } catch(e) {
                    }
                    mtg.server.signup(draftId).done(function(result) {
                        switch (result) {
                        case 0:
                            //Error
                            alert("An error occurred signing up. Please refresh the page and try again");
                            break;
                        case 1:
                            //Need to link mtgo username to twitch account
                            $('#dialog_mtgolink').dialog('open');
                            break;
                        case 2:
                            $('#dialog_mtgolink').dialog('open');
                            //TODO: Fix this
                            $('#dialog_mtgolink input[name=mtgousername]').val('****');
                            $('#dialog_mtgolink .wizard_steps ul li:nth-child(2) a').trigger('click');
                            break;
                        }
                    });
                };

                this.approveRandom = function() {
                    var data = pendingDataTable.fnGetData();

                    if (!data || data.length <= 0)
                        return;
                    
                    approvePlayer(data[Math.floor(Math.random() * data.length)]);
                };

                this.performReadyCheck = function() {
                    console.log("Performing Readycheck");
                    if (this.readyCheck != null) {
                        alert("You are already running a readycheck. Please wait before you start another");
                        return;
                    }

                    this.readyCheck = true;
                    mtg.server.initReadyCheck(draftId).done(function(guid) {
                        self.readyCheck = guid;
                        var rows = acceptedDataTable.fnGetData();
                        for (var i = 0; i < rows.length; i++) {
                            rows[i].readyCheck = rows[i].userId == self.myUserid ? "ready" : "pending";
                            acceptedDataTable.fnUpdate(rows[i], i);
                        }

                        setTimeout(function() {
                            if (self.readyCheck != null && self.readyCheck != guid)
                                return;
                            
                            self.readyCheck = null;
                            var rows = acceptedDataTable.fnGetData();
                            for (var i = 0; i < rows.length; i++) {
                                if (rows[i].readyCheck == "pending") {
                                    rows[i].readyCheck = "notready";
                                    acceptedDataTable.fnUpdate(rows[i], i);
                                }
                            }
                        }, 30000);
                    });
                };

                this.startDraft = function() {
                    console.log("Start Draft");
                    mtg.server.startDraft(draftId).done(function(success) {
                        if (!success)
                            alert("An error occurred starting the draft. Please refresh and try again.");
                        else if (self.isApprovedPlayer())
                            location.href = '@Url.Action("Draft")/' + draftId;
                        else
                            self.status(@((int) CubeDraftStatus.Drafting));
                    });
                };

                this.pairNextRound = function() {
                    console.log("Pair Next Round");
                    mtg.server.pairNextRound(draftId).done(function(status) {
                        if (status.Success) {
                            alert("The next round was sucessfully paired.");
                        } else {
                            alert(status.Message);
                        }
                    });
                };

                this.endTournament = function() {
                    if (confirm('Are you sure you wish to end this tournament?')) {
                        mtg.server.endTournament(draftId).done(function(status) {
                            if (status.Success) {
                                alert("The tournament has successfully ended. Players should open trade with the bot, and start handing in their collection.");
                            } else {
                                alert(status.Message);
                            }
                        });
                    }
                };

                mtg.client.draftStarted = function() {
                    if (self.isApprovedPlayer())
                        location.href = '@Url.Action("Draft")/' + draftId;
                    else
                        self.status(@((int) CubeDraftStatus.Drafting));
                };

                mtg.client.newPairings = function(round, pairings) {
                    self.currentRound(round);
                    self.pairings(pairings);
                };

                mtg.client.newStandings = function(standings) {
                    self.standings(standings);
                };

                mtg.client.matchUpdate = function(match) {
                    console.log(match);

                    self.pairings.remove(function(pairing) {
                        return pairing.Round == match.Round && comparePlayers(pairing.Player1, match.Player1) && comparePlayers(pairing.Player2, match.Player2);
                    });

                    self.pairings.push(match);
                };

                /*
                 * Ready check functions
                 */
                mtg.client.readyCheck = function(guid) {
                    self.readyCheck = guid;
                    console.log("ReadyCheck: " + self.readyCheck);
                    var rows = acceptedDataTable.fnGetData();
                    for (var i = 0; i < rows.length; i++) {
                        rows[i].readyCheck = "pending";
                        acceptedDataTable.fnUpdate(rows[i], i);
                    }

                    setTimeout(function() {
                        if (self.readyCheck != null && self.readyCheck != guid)
                            return;
                        
                        self.readyCheck = null;
                        var rows = acceptedDataTable.fnGetData();
                        for (var i = 0; i < rows.length; i++) {
                            if (rows[i].readyCheck == "pending") {
                                rows[i].readyCheck = "notready";
                                acceptedDataTable.fnUpdate(rows[i], i);
                            }
                        }
                    }, 30000);
                    
                    $('<audio/>').attr('src', '/Content/warning.mp3').attr('autoplay', 'autoplay')[0].play();
                    $('#dialog_readycheck').dialog('open');

                    //After 30 seconds they are away
                    setTimeout(function() {
                        if (self.readyCheck == guid)
                            $('#dialog_readycheck').dialog('close');
                    }, 30000);
                };

                mtg.client.readyCheckUpdate = function(guid, user, ready) {
                    if (self.readyCheck != guid)
                        return;

                    var rows = acceptedDataTable.fnGetData();
                    var finished = true;
                    for (var i = 0; i < rows.length; i++) {
                        if (rows[i].id == user) {
                            rows[i].readyCheck = ready ? "ready" : "notready";
                            acceptedDataTable.fnUpdate(rows[i], i);
                        }

                        if (rows[i].readyCheck == "pending")
                            finished = false;
                    }

                    if (finished)
                        self.readyCheck = null;
                };
                
                $('#dialog_readycheck button.green').click(function() {
                    mtg.server.readyCheck(self.readyCheck, draftId, true);
                });

                $('#dialog_readycheck button.red').click(function() {
                    mtg.server.readyCheck(self.readyCheck, draftId, false);
                });

                //Subscribe to server events
                mtg.client.addedCards = function(cards) {
                    var selfCards = self.cards();
                    $.each(cards, function(idx, card) {
                        selfCards.push(card);
                    });

                    self.cards(selfCards);
                };

                mtg.client.statusUpdate = function(newStatus) {
                    self.status(newStatus);
                };

                mtg.client.startedDraft = function() {
                    if (self.isApprovedPlayer())
                        location.href = '@Url.Action("Draft")/' + draftId;
                };

                mtg.client.allDecksBuilt = function() {
                    if (window.webkitNotifications && window.webkitNotifications.checkPermission() == 0) {
                        window.webkitNotifications.createNotification("/Images/logo-notification.png", "MTGBot.tv", "All players have reported ready for deck building.").show();
                    } else {
                        alert("All players have reported ready for deck building.");
                    }
                };

                mtg.client.playerUpdated = function(player) {
                    console.log("Player updated");
                    console.log(player);

                    var obj = null;
                    try {
                        var rows = pendingDataTable.fnGetData();
                        console.log(rows);

                        for (var i = 0; i < rows.length; i++) {
                            if (rows[i].id == player.Id) {
                                obj = rows[i];
                                pendingDataTable.fnDeleteRow(i);
                                break;
                            }
                        }

                        if (obj == null) {
                            rows = acceptedDataTable.fnGetData();
                            console.log(rows);
                            for (i = 0; i < rows.length; i++) {
                                if (rows[i].id == player.Id) {
                                    obj = rows[i];
                                    acceptedDataTable.fnDeleteRow(i);
                                    break;
                                }
                            }
                        }
                    } catch(e) {

                    }

                    self.pendingPlayers.remove(function(item) {
                        return item.id == player.Id;
                    });

                    self.acceptedPlayers.remove(function(item) {
                        return item.id == player.Id;
                    });

                    if (obj == null) {
                        $.getJSON('https://api.twitch.tv/kraken/users/' + player.Username + '?callback=?', null,
                            function(data) {
                                var smallImage = 'http://static-cdn.jtvnw.net/jtv_user_pictures/xarth/404_user_50x50.png';
                                var largeImage = 'http://static-cdn.jtvnw.net/jtv_user_pictures/xarth/404_user_50x50.png';

                                if (data.logo != null) {
                                    smallImage = data.logo.replace(/50x50/, '28x28');
                                    largeImage = data.logo;
                                }

                                var newPlayer = {
                                    id: player.Id,
                                    userId: player.UserId,
                                    username: player.Username,
                                    mtgoUsername: player.MtgoUsername,
                                    collateral: player.RequireCollateral,
                                    displayName: data.display_name,
                                    smallImage: smallImage,
                                    largeImage: largeImage,
                                    collectionStatus: player.DeckStatus,
                                    tradeStatus: player.Trading
                                };
                                
                                if ((self.status() == @((int) CubeDraftStatus.InMatches) || self.status() == @((int) CubeDraftStatus.ProductHandOut)) && self.pairings().length == 0 && self.isBroadcaster()) {
                                    newPlayer.readyCheck = player.DeckBuilt ? "ready" : "notready";
                                }

                                if (player.Confirmed) {
                                    self.acceptedPlayers.push(newPlayer);
                                    acceptedDataTable.fnAddData(newPlayer);
                                } else {
                                    self.pendingPlayers.push(newPlayer);
                                    pendingDataTable.fnAddData(newPlayer);
                                }
                            }
                        );
                    } else {
                        obj.mtgoUsername = player.MtgoUsername;
                        obj.collateral = player.RequireCollateral;
                        obj.collectionStatus = player.DeckStatus;
                        obj.tradeStatus = player.Trading;
                        
                        if ((self.status() == @((int) CubeDraftStatus.InMatches) || self.status() == @((int) CubeDraftStatus.ProductHandOut)) && self.pairings().length == 0 && self.isBroadcaster()) {
                            obj.readyCheck = player.DeckBuilt ? "ready" : "notready";
                        }

                        if (player.Confirmed) {
                            self.acceptedPlayers.push(obj);
                            acceptedDataTable.fnAddData(obj);

                        } else {
                            self.pendingPlayers.push(obj);
                            pendingDataTable.fnAddData(obj);
                        }
                    }
                };
            };

            window.vm = new viewModel();
            ko.applyBindings(vm);

            var stepLinkMtgo = 1;
            $('#dialog_mtgolink .step[data-step=\'1\'] button.next_step').data('next', function() {
                if (stepLinkMtgo > 1)
                    return true;

                showLoadingOverlay();
                mtg.server.linkUsername($('#dialog_mtgolink input[name=mtgousername]').val()).done(function(result) {
                    hideLoadingOverlay();
                    console.log("linkUsername result = " + result);
                    switch (result) {
                    case 0:
                        alert("An unknown error occurred while signing up. Please refresh the page and try again.");
                        break;
                    case 1:
                        //Unable to send message ingame
                        alert("There was a problem sending the message to this user. Please make sure you are signed in. If this problem persists, please contact the webmaster.");
                        break;
                    case 2:
                        $('#dialog_mtgolink form').validate().showErrors({
                            mtgousername: "This username is already linked to another twitch user."
                        });
                        break;
                    case 3:
                        stepLinkMtgo = 2;
                        //Success
                        $('#dialog_mtgolink .wizard_steps ul li:nth-child(2) a').trigger('click');
                        break;
                    }
                });

                return false;
            });

            $('#dialog_mtgolink .step[data-step=\'2\'] button.next_step').data('next', function() {
                if (stepLinkMtgo > 2)
                    return true;

                mtg.server.confirmUsername($('#dialog_mtgolink input[name=confirmkey]').val()).done(function(result) {
                    console.log("confirmUsername result = " + result);
                    switch (result) {
                    case 0:
                        alert("An unknown error occurred while confirming your mtgo username. Please refresh the page and try again.");
                        break;
                    case 1:
                        //Key is incorrect
                        $('#dialog_mtgolink form').validate().showErrors({
                            confirmkey: "Invalid Code"
                        });
                        break;
                    case 2:
                        //Trying more then 3 times within 5 minutes
                        $('#dialog_mtgolink form').validate().showErrors({
                            confirmkey: "Too many attempts. Please try again later."
                        });
                        break;
                    case 3:
                        //MTGO already linked to another account
                        $('#dialog_mtgolink form').validate().showErrors({
                            confirmkey: "This mtgo account has already been linked to another account."
                        });
                        break;
                    case 4:
                        //Success
                        stepLinkMtgo = 3;
                        $('#dialog_mtgolink .wizard_steps ul li:nth-child(3) a').trigger('click');
                        break;
                    }
                });

                return false;
            });


            $('#dialog_mtgolink .step[data-step=\'3\'] button.finish').bind('click', function() {
                mtg.server.signup(draftId).done(function(result) {
                    switch (result) {
                    case 0:
                    case 1:
                    case 2:
                        //Error
                        alert("An error occurred signing up. Please refresh the page and try again");
                        break;
                    case 3:
                        $('#dialog_mtgolink').dialog('close');
                        break;
                    }
                });
            });

            // Start the connection.
            $.connection.hub.start().done(function() {
                mtg.server.subscribeToDraft(@ViewContext.RouteData.Values["id"]);

                /*$('#sendmessage').click(function () {
                        // Call the Send method on the hub. 
                        chat.server.send($('#message').val());
                        // Clear text box and reset focus for next comment. 
                        $('#message').val('').focus();
                    });*/
            });
            // This optional function html-encodes messages for display in the page.
        });

        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>
}