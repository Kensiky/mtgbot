@using MTGO.Common.Models;
@model MTGO.Common.Entities.CubeDrafting.CubeDraft
@{
    ViewBag.Title = "Cube Draft";
    ViewBag.Description = "Create a Cube Draft";
}
    
<div class="box light grid_16" style="opacity: 1;">
    <!--<h2 class="box_head">Wizard</h2>-->
    <div class="controls">
        <div class="wizard_progressbar ui-progressbar ui-widget ui-widget-content ui-corner-all" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="25"><div class="ui-progressbar-value ui-widget-header ui-corner-left" style="width: 25%;"></div></div>
    </div>
    <div class="toggle_container">
        <div class="wizard">
            <div class="wizard_steps">
                <ul class="clearfix">
                    <li class="current">
                        <a href="#step_1" class="clearfix" onclick="return false;">
                            <span>1. <strong>Basic Information</strong></span>
                            <small>Draft Name, Settings</small>
                        </a>
                    </li>
                    <li>
                        <a href="#step_2" class="clearfix" onclick="return false;">
                            <span>2. <strong>Upload cube</strong></span>
                            <small>Trade cube with mtgbot for deployment</small>
                        </a>
                    </li>
                    <li>
                        <a href="#step_3" class="clearfix" onclick="return false;">
                            <span>3. <strong>Finish</strong></span>
                            <small>Confirm and complete</small>
                        </a>
                    </li>
                </ul>
            </div>

            <div class="wizard_content">
                <form action="#" method="post" class="validate_form" novalidate="novalidate">
                    <div data-step="1" class="step block" style="display: block; opacity: 1;">
                        <div class="section">
                            <h2>1. Cube Draft Information</h2>
                            <p>Welcome to the new cube draft system created by mtgbot! Please enter the following information to get started</p>
                        </div>
                        <div class="columns even clearfix">
                            <div class="col_50" style="height: 57px;">
                                <fieldset class="label_side top" style="height: 56px;">
                                    <label style="height: 26px;">Name</label>
                                    <div class="clearfix" style="height: 26px;">
                                        <input name="tournament_name" type="text" class="required text" title="A friendly name to show for the website" value="@(Model != null ? Model.Name : "")">
                                        <div class="required_tag"></div>
                                    </div>
                                </fieldset>
                            </div>
                            <div class="col_50" style="height: 57px;">
                                <fieldset class="label_side top right" style="height: 56px;">
                                    <label style="height: 26px;">Round Limits on Matches</label>
                                    <div class="clearfix" style="height: 26px;">
                                        <select name="round_limits" class="uniform full_width" style="opacity: 0;" title="This is how long mtgbot will tell users to create matches.">
                                            <option value="15">15 Minutes (30 Minutes Total)</option>
                                            <option value="20">20 Minutes (40 Minutes Total)</option>
                                            <option value="30" selected="selected">30 Minutes (60 Minutes Total)</option>
                                            <option value="40">40 Minutes (1 Hour 20 Minutes Total)</option>
                                            <option value="60">1 Hour (2 Hours Total)</option>
                                        </select>
                                    </div>
                                </fieldset>
                            </div>
                        </div>
                        <!--
                            <div class="columns even clearfix">
                                <div class="col_100" style="height: 57px;">
                                    <fieldset class="label_side">
                                        <label>Message</label>
                                        <div class="uniform inline clearfix">
                                            <label for="message"><div class="checker"><span><input type="checkbox" name="message" checked="checked" value="1" style="opacity: 0;"></span></div>If Checked, after creation, have mtgbot send a message to your channel with a link.</label>
                                        </div>
                                    </fieldset>
                                </div>
                            </div>
                            -->
                        <div class="columns even clearfix">
                            <div class="col_100" style="height: 57px;">
                                <fieldset class="label_side">
                                    <label>Require Watchers</label>
                                    <div class="uniform inline clearfix">
                                        <label for="message"><div class="checker"><span><input type="checkbox" name="require_watchers" checked="checked" value="1" style="opacity: 0;"></span></div>If Checked, will require games to be created with the "allow watchers" checked.</label>
                                    </div>
                                </fieldset>
                            </div>
                        </div>
                        <div class="button_bar clearfix">
                            <button class="next_step forward send_right img_icon has_text green" type="button">
                                <img height="24" width="24" alt="Bended Arrow Right" src="~/Images/icons/small/white/bended_arrow_right.png">
                                <span>Next Step</span>
                            </button>
                        </div>
                    </div>

                    <div data-step="2" class="step block" style="opacity: 1;">
                        <div class="section">
                            <h2>2. Upload Cube</h2>
                            <p>Your designated bot for this draft will be: <span class="mtgo_bot" style="font-weight: bold"></span></p>
                            <p>Please open trade with "<span class="mtgo_bot" style="font-weight: bold"></span>" on mtgo and trade the cube collection. This page will update when the trade is complete with the cards. Click next when you are finished trading your collection. Your cube must be able to support at least 2 players to continue.</p>
                        </div>

                        <div class="columns clearfix grid_16" style="opacity: 1;">
                            <!--<div id="currentpack">

                                    <ul id="cards" data-bind="foreach: cards">
                                        <li>
                                            <img draggable="true" data-bind="attr: { src: $root.thumbLink($data), alt: 'Alt Test' }, event: {
                            mouseover: enableDetails, mouseout: disableDetails, dragstart: function (data, event) { $parent.dragsel = this; ); return true; },
                            dragend: function (data, event) { return true; },
                            dragover: function (data, event) { event.preventDefault(); },
                            dragenter: function (data, event) { event.preventDefault(); },
                            dragleave: function (data, event) { event.preventDefault(); }

                            }" src="" alt="" />
                                        </li>
                                    </ul>
                                </div>-->
                            <div class="col_100">
                                <div class="box grid_16">
                                    <h2 class="box_head">
                                        Cards:&nbsp; <div data-bind="text: cards().length" style="display: inline;">&nbsp;</div>&nbsp;&nbsp;&nbsp; (Supported Players:&nbsp; <div data-bind="text: supportedPlayers()" style="display: inline;">&nbsp;</div>)
                                        <button class="light small has_text send_right" data-bind="click: sortByCost">Cost</button>
                                        <button class="light small has_text send_right" data-bind="click: sortByColor">Color</button>
                                        <div class="send_right">Sort By: &nbsp;</div>
                                    </h2>
                                    <div class="block">
                                        <div class="section">
                                            <table>
                                                <tr class="cards" data-bind="foreach: columns">
                                                    <td data-bind="foreach: $data, style: { height: (134 + 20 * $data.length) + 'px' }" style="width: 108px">
                                                        <div style="padding: 0 2px 0 2px" data-bind="attr: { style: 'z-index: ' + $index() + '; position: absolute; margin-top: ' + $index() * 20 + 'px;' }, event: { mouseover: enableDetails, mouseout: disableDetails }">
                                                            <img data-bind="attr: { src: thumbLink($data), alt: Name }" />
                                                        </div>
                                                        <div style="clear: both"></div>
                                                    </td>
                                                </tr>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="button_bar clearfix">
                            <button class="dark img_icon has_text cancel red">
                                <div class="ui-icon ui-icon-closethick"></div>
                                <span>Cancel and Return Cards</span>
                            </button>
                            <button class="next_step forward send_right img_icon has_text" type="button" data-bind="enable: supportedPlayers() > 1, css: buttonColor">
                                <img height="24" width="24" alt="Bended Arrow Right" src="/Images/icons/small/white/bended_arrow_right.png">
                                <span>Next Step</span>
                            </button>
                        </div>
                    </div>
                    
                    <div data-step="3" class="step block" style="opacity: 1;">
                        <div class="section">
                            <h2>3. Information</h2>
                            <p>Your cube draft is ready to go. A brief breakdown of how the draft will run is below:</p>
                            <ul>
                                <li>Create your draft (This step)</li>
                                <li>Send a link to people interested in joining your draft, and have them signup.</li>
                                <li>Accept players by clicking their name in the pending players box.</li>
                                <li>After you accept at least 2 members, you can start your draft by clicking "Start Draft" below accepted players.<br />Note: You can require collateral in order for users to recieve their cards. Please let them know ahead of time, so they can have their tickets ready.</li>
                                <li>Accepted players in the draft will be redirected to a draft page to start their draft.</li>
                                <li>After the draft is complete, players can download their deck, and the bot designated for your draft will auto trade them their collection to use.</li>
                                <li>When players are done building their decks, you can start pairing of the rounds. The bot will handle handing out pairings to everyone.</li>
                                <li>When games are completed, they are automatically posted back to the website. Continue pairing rounds until you are done.</li>
                                <li>After the draft is completed, players can hand back decks to the bot, and after all are collected, you will automatically be traded in game with your collection back.</li>
                                <li>Happy drafting!</li>
                            </ul>
                        </div>

                        <div class="columns clearfix grid_16" style="opacity: 1;">
                        </div>
                        <div class="button_bar clearfix">
                            <button class="finish forward green send_right img_icon has_text" type="button">
                                <img height="24" width="24" alt="Bended Arrow Right" src="/Images/icons/small/white/bended_arrow_right.png">
                                <span>Goto Draft Page</span>
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>


@section scripts {
    <!--Script references. -->
    @Scripts.Render("~/Scripts/knockout/knockout.js")
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-1.0.1.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.--> 
    
    <script type="text/javascript">
        $(function() {
            var mtg = $.connection.cubeHub;
            console.log(mtg);
            $.connection.hub.logging = true;
            @if (Model != null && Model.BotName != null)
            {
                <text>var mtgBot = "@Model.BotName";</text>
            }
            else
            {
                <text>var mtgBot = null;</text>
            }
            
            @if (Model != null)
            {
                <text>var draftId = @Model.Id;</text>
            }
            else
            {
                <text>var draftId = null;</text>
            }

            @if (Model != null)
            {
                <text>
                    $('.mtgo_bot').text(mtgBot);
                    $('.wizard .step[data-step=\'1\'] button.next_step').trigger('click');
                </text>
            }
            
            $('.wizard .step[data-step=\'1\'] button.next_step').data('next', function() {
                if (mtgBot != null && draftId != null)
                    return true;

                showLoadingOverlay();
                mtg.server.createDraft($('input[name=tournament_name]').val(), parseInt($('select[name=round_limits]').val()), $('input[name=require_watchers]').is(":checked")).done(function(response) {
                    console.log(response);
                    if (!response.Success) {
                        alert(response.Message);
                    } else {
                        mtgBot = response.Data.Username;
                        draftId = response.Data.DraftId;
                        $('.mtgo_bot').text(response.Data.Username);
                        $('.wizard .step[data-step=\'1\'] button.next_step').trigger('click');
                    }
                    hideLoadingOverlay();
                });
                return false;
            });
            
            $('.wizard .step[data-step=\'2\'] button.cancel').bind('click', function () {
                mtg.server.cancelDraft(draftId).done(function(success) {
                    if (success) {
                        alert('Your draft has been canceled. If you traded any cards, they will be returned to you shortly.');
                    } else {
                        alert('There was a problem canceling this draft. Please refresh the page and try again.');
                    }
                    location.reload();
                });
                return false;
            });
            
            $('.wizard .step[data-step=\'2\'] button.next_step').data('next', function () {
                return cvm.supportedPlayers() > 1;
            });
            
            $('.wizard .step[data-step=\'3\'] button.finish').bind('click', function () {
                location.href = "@Url.Action("View")/" + draftId;
            });

            var cardViewModel = function() {
                var self = this;
                this.cards = ko.observableArray([]);
                this.sortBy = ko.observable("color");

                this.supportedPlayers = ko.computed(function () {
                    return Math.floor(self.cards().length / 45);
                });

                this.buttonColor = ko.computed(function () {
                    return self.supportedPlayers() < 2 ? "red" : "green";
                });

                this.dragsel = "init";

                var origz;
                var origw;

                self.sortByColor = function () {
                    self.sortBy("color");
                };
    
                self.sortByCost = function () {
                    self.sortBy("cost");
                };

                this.columns = ko.computed(function () {
                    var desiredType = self.sortBy();
                    var cards = self.cards();
                    var rowCards = [];
                    var result = [];
                    
                    if (desiredType == "cost") {
                        for (var i = 0; i <= 20; i++) {
                            rowCards = ko.utils.arrayFilter(cards, function (card) {
                                return card.CMC == i;
                            });
                            
                            if (rowCards.length > 0)
                                result.push(rowCards);
                        }
                    } else if (desiredType == "color") {
                        //Match all the colors
                        var colors = ['L', 'C', 'W', 'U', 'B', 'R', 'G'];

                        $.each(colors, function(idx, color) {
                            rowCards = ko.utils.arrayFilter(cards, function (card) {
                                return card.Color == color;
                            });
                            
                            if (rowCards.length > 0)
                                result.push(rowCards);
                        });
                        
                        //Match multicolored
                        rowCards = ko.utils.arrayFilter(cards, function (card) {
                            return $.inArray(card.Color, colors) == -1;
                        });
                        
                        if (rowCards.length > 0)
                            result.push(rowCards);
                    }

                    //console.log(result);
                    return result;
                });

                enableDetails = function(item, event) {
                    origz = $(event.target).parent().css('z-index');
                    origw = $(event.target).css('width');

                    $(event.target).parent().css('z-index', '1000');
                    $(event.target).css('width', 'auto');
                },
                
                disableDetails = function(item, event) {
                    $(event.target).css('width', origw);
                    $(event.target).parent().css('z-index', origz);
                },
                

                mtg.client.addedCards = function (cards) {
                    var selfCards = self.cards();
                    $.each(cards, function (idx, card) {
                        selfCards.push(card);
                    });

                    self.cards(selfCards);
                };

                /*
                self.addSelection = function (data) {
                    // First remove from the server, then from the UI
                    console.log('adding selection');
                    console.log(data);
                    clearInterval(timer);
                    var selection = JSON.stringify(data);
                    $.ajax({
                        url: "/api/Draft",
                        type: "POST",
                        data: selection,
                        datatype: "json",
                        contentType: "application/json; charset=utf-8",
                    })
                        .done(function (postreturn) {
                            self.selections(postreturn.Picks);
                            if (postreturn.CurrentPack.packCards != null) {
                                self.contacts(postreturn.CurrentPack.packCards);
                                self.myclock(40);
                                timer = setInterval(self.tick, 1000);
                            } else {
                                self.loaded(false);
                                self.contacts([]);
                                refresher = setInterval(self.getDraft, 5000);
                            }
                            //self.selections.push(data);
                        });
                    if (self.selections().length > 44) {
                        alert("draft complete!");
                        clearInterval(timer);
                        clearInterval(refresher);
                        self.draftOver(true);
                    }
                    return true;
                };
                */

                textDeck = function() {
                    //alert(self.sideboardids());
                    /*var mysideboard = JSON.stringify(self.sideboard());
                    $("body").append("<iframe src='" + "/api/Contacts?sideboard=" + mysideboard + "' style='display: none;' ></iframe>");*/
                };
            };

            $.fn.serializeObject = function() {
                var o = {};
                var a = this.serializeArray();
                $.each(a, function() {
                    if (o[this.name]) {
                        if (!o[this.name].push) {
                            o[this.name] = [o[this.name]];
                        }
                        o[this.name].push(this.value || '');
                    } else {
                        o[this.name] = this.value || '';
                    }
                });
                return o;
            };

            window.cvm = new cardViewModel();
            ko.applyBindings(cvm);

            $.connection.hub.start().done(function() {
                //console.log(mtg.server);
                @if (Model != null)
                {
                    <text>mtg.server.subscribeToDraft(@Model.Id);</text>
                }


                /*$('#sendmessage').click(function () {
                        // Call the Send method on the hub. 
                        chat.server.send($('#message').val());
                        // Clear text box and reset focus for next comment. 
                        $('#message').val('').focus();
                    });*/
            });
        });
    </script>
}